/* libspire_serial.vapi generated by valac.exe 0.12.0, do not modify. */

[CCode (cprefix = "edwinspire", lower_case_cprefix = "edwinspire_")]
namespace edwinspire {
	[CCode (cprefix = "edwinspirePorts", lower_case_cprefix = "edwinspire_ports_")]
	namespace Ports {
		[CCode (cheader_filename = "libspire_serial.h")]
		public class Configure : GLib.Object {
			public Configure ();
			public uint BaudRate { get; set; }
			public ulong BufferIn { get; set; }
			public ulong BufferOut { get; set; }
			public uint DataBits { get; set; }
			public bool Enable { get; set; }
			public edwinspire.Ports.HandShaking HandShake { get; set; }
			public edwinspire.Ports.Parity Parity { get; set; }
			public string Port { get; set; }
			public edwinspire.Ports.StopBits StopBits { get; set; }
			public uint TimeOut { get; set; }
		}
		[CCode (cheader_filename = "libspire_serial.h")]
		[Description (blurb = "Clase para manejar Modems", nick = "Modem")]
		public class Modem : edwinspire.Ports.SerialPort {
			public Modem ();
			public bool AT ();
			public bool ATA ();
			public bool ATD (string Number);
			public bool ATE (bool enable);
			public int ATS (int register);
			public int ATS0 ();
			public bool ATS0_Set (int rings);
			public int ATS10 ();
			public bool ATS10_Set (int delay = 2);
			public int ATS2 ();
			public bool ATS2_Set (int character = 43);
			public int ATS3 ();
			public bool ATS3_Set (int character = 13);
			public int ATS4 ();
			public bool ATS4_Set (int character = 10);
			public int ATS5 ();
			public bool ATS5_Set (int character = 8);
			public int ATS7 ();
			public bool ATS7_Set (int timeout = 50);
			public bool ATS_Set (int register, int value);
			public bool ATV (bool enable);
			public bool ATZ ();
			public bool AcceptCall ();
			public int AutomaticAnswerControl ();
			public bool AutomaticAnswerControl_Set (int rings);
			public int AutomaticDisconnectDelayControl ();
			public bool AutomaticDisconnectDelayControl_Set (int delay = 2);
			public int CommandLineEditingCharacter ();
			public bool CommandLineEditingCharacter_Set (int character = 8);
			public int CommandLineTerminationCharacter ();
			public bool CommandLineTerminationCharacter_Set (int character = 13);
			public int CompletionConnectionTimeOut ();
			public bool CompletionConnectionTimeOut_Set (int timeout = 50);
			public bool DialCommand (string number);
			public bool Echo (bool enable);
			public bool EscapeSequense ();
			public int EscapeSequenseCharacter ();
			public bool EscapeSequenseCharacter_Set (int character = 43);
			public edwinspire.Ports.Response Receive (int waitforresponse_ms = 0, bool preventDetectFalseResponse = false);
			public int ResponseFormattingCharacter ();
			public bool ResponseFormattingCharacter_Set (int character = 10);
			public bool Send (string ComandoAT);
			public bool SendSimpleCommand (string ATCommand);
			public bool SetToDefaultConfiguration ();
			public uint TestTimeOutMin ();
			public bool VerboseMode (bool enable);
			public signal void CallID (string Number);
			public signal void Ringing ();
		}
		[CCode (cheader_filename = "libspire_serial.h")]
		public class Response : GLib.Object {
			public Gee.ArrayList<string> Lines;
			public edwinspire.Ports.ResponseCode Return;
			public Response ();
			public Response.with_args (edwinspire.Ports.ResponseCode Return, Gee.ArrayList<string> Lines);
		}
		[CCode (cheader_filename = "libspire_serial.h")]
		public class SerialPort : edwinspire.Ports.Configure {
			public SerialPort ();
			public bool Close ();
			public bool DiscardBuffer ();
			public string[] Get_PortName ();
			public bool Open ();
			public char ReadChar ();
			public string? ReadLine (uint timeout = 0);
			public bool Time (uint Time_);
			public long Write (string Data_);
			public SerialPort.with_args (string Port_ = "/dev/ttyS0", uint Baudrate = 2400, uint DataBits = 8, edwinspire.Ports.Parity Parity_ = @this.Parity.NONE, edwinspire.Ports.StopBits StopBits_ = @this.StopBits.ONE, edwinspire.Ports.HandShaking HS = HandShaking.NONE);
			public bool Blocking { get; set; }
			public int BytesToRead { get; }
			public bool IsOpen { get; }
			public signal void Status (edwinspire.Ports.DataStatus Status);
		}
		[CCode (cprefix = "EDWINSPIRE_PORTS_DTMF_", cheader_filename = "libspire_serial.h")]
		[Description (blurb = "Tono DTMF permitidos", nick = "DTMF")]
		public enum DTMF {
			Zero,
			One,
			Two,
			Three,
			Four,
			Five,
			Six,
			Sever,
			Eigth,
			Nine,
			Asterisc,
			Sharp
		}
		[CCode (cprefix = "EDWINSPIRE_PORTS_DATA_STATUS_", cheader_filename = "libspire_serial.h")]
		[Description (blurb = "Estado del modem", nick = "Data Status")]
		public enum DataStatus {
			None,
			Sending,
			Receiving
		}
		[CCode (cprefix = "EDWINSPIRE_PORTS_HAND_SHAKING_", cheader_filename = "libspire_serial.h")]
		[Description (blurb = "Especifica el protocolo de control utilizado para establecer la comunicacion con el puerto serie", nick = "HandShaking")]
		public enum HandShaking {
			NONE,
			RTS_CTS,
			XOnXOff,
			DTR_DSR
		}
		[CCode (cprefix = "EDWINSPIRE_PORTS_PARITY_", cheader_filename = "libspire_serial.h")]
		[Description (blurb = "Especifica el bit de paridad", nick = "Parity")]
		public enum Parity {
			NONE,
			ODD,
			EVEN,
			MARK,
			SPACE
		}
		[CCode (cprefix = "EDWINSPIRE_PORTS_RESPONSE_CODE_", cheader_filename = "libspire_serial.h")]
		public enum ResponseCode {
			OK,
			CONNECT,
			RING,
			NOCARRIER,
			ERROR,
			NODIALTONE,
			BUSY,
			NOANSWER,
			ERROR_CMS,
			UNKNOW
		}
		[CCode (cprefix = "EDWINSPIRE_PORTS_STOP_BITS_", cheader_filename = "libspire_serial.h")]
		[Description (blurb = "Especifica el n√∫mero de bits de parada utilizado", nick = "StopBits")]
		public enum StopBits {
			NONE,
			ONE,
			TWO
		}
	}
}
